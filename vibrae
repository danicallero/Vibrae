#!/bin/bash
# SPDX-License-Identifier: GPL-3.0-or-later
# Vibrae CLI - Music Automation System

set -euo pipefail

# Paths
SCRIPT_PATH="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
export ROOT_DIR="$(dirname "$SCRIPT_PATH")"
VENV="$ROOT_DIR/.venv"
ENV_FILE="$ROOT_DIR/config/env/.env.backend"
ENV_EXAMPLE="$ROOT_DIR/config/env/.env.example"

# Source helpers
. "$ROOT_DIR/lib/cli-helpers.sh"
. "$ROOT_DIR/lib/env-manager.sh"

# Commands
cmd_install() {
  header "Installing Vibrae"
  ensure_venv "$VENV" || return 1
  cd "$ROOT_DIR"
  info "Installing dependencies..."
  "$VENV/bin/pip" install -e .[dev] || { err "Installation failed"; return 1; }
  ok "Dependencies installed"
}

cmd_start() {
  header "Starting Vibrae Services"
  ensure_env_file "$ENV_FILE" "$ENV_EXAMPLE"
  local result=$?
  [ $result -eq 2 ] && { warn "Edit config first: vibrae env edit"; return 1; }
  [ $result -eq 1 ] && return 1
  cd "$ROOT_DIR"
  [ -f "scripts/app/run.sh" ] || { err "Start script not found"; return 1; }
  bash "scripts/app/run.sh"
}

cmd_stop() {
  header "Stopping Vibrae Services"
  cd "$ROOT_DIR"
  [ -f "scripts/app/stop.sh" ] || { err "Stop script not found"; return 1; }
  bash "scripts/app/stop.sh"
}

cmd_restart() { cmd_stop; sleep 2; cmd_start; }

cmd_status() {
  header "Service Status"
  local all_stopped=true
  if is_running "uvicorn.*vibrae"; then
    ok "Backend:  Running (PID: $(get_pid 'uvicorn.*vibrae'))"
    all_stopped=false
  else
    warn "Backend:  Stopped"
  fi
  if is_running "npx serve" || is_running "nginx.*vibrae"; then
    ok "Frontend: Running"
    all_stopped=false
  else
    warn "Frontend: Stopped"
  fi
  if is_running "cloudflared"; then
    ok "Tunnel:   Running"
    all_stopped=false
  else
    info "Tunnel:   Not configured"
  fi
  echo ""
  [ "$all_stopped" = true ] && warn "All stopped. Run: vibrae start" || ok "Running"
}

cmd_logs() {
  local logname="${1:-backend}"
  local logfile="$ROOT_DIR/logs/${logname}.log"
  [ ! -f "$logfile" ] && { err "Log not found: $logfile"; ls "$ROOT_DIR/logs"/*.log 2>/dev/null | xargs -n1 basename; return 1; }
  info "Tailing $logname.log..."
  tail -f "$logfile"
}

cmd_test() {
  header "Running Tests"
  ensure_venv "$VENV" || return 1
  cd "$ROOT_DIR"
  "$VENV/bin/pytest" -q || { err "Tests failed"; return 1; }
  ok "All tests passed"
}

cmd_config() { env_edit; }
cmd_version() { echo "vibrae 0.1.0"; }

cmd_autostart() {
  local action="${1:-status}"
  case "$action" in
    on|enable|true)
      env_set "AUTOSTART" "true"
      ok "Autostart enabled"
      info "Services will start automatically when entering shell mode"
      ;;
    off|disable|false)
      env_set "AUTOSTART" "false"
      ok "Autostart disabled"
      ;;
    status|"")
      if [ -f "$ENV_FILE" ]; then
        set -a
        . "$ENV_FILE"
        set +a
        local current="${AUTOSTART:-false}"
        if [ "$current" = "true" ]; then
          ok "Autostart: enabled"
        else
          info "Autostart: disabled"
        fi
      else
        warn "Config file not found"
      fi
      ;;
    *)
      err "Usage: autostart [on|off|status]"
      return 1
      ;;
  esac
}

cmd_shell() {
  # Check autostart flag
  if [ -f "$ENV_FILE" ]; then
    set -a
    . "$ENV_FILE"
    set +a
    
    if [ "${AUTOSTART:-false}" = "true" ]; then
      info "AUTOSTART enabled - starting services..."
      cmd_start
      echo ""
      cmd_status
      echo ""
    fi
  fi
  
  header "Vibrae Interactive Shell"
  info "Type commands without 'vibrae' prefix. Type 'exit' or Ctrl+D to quit."
  echo ""
  
  while true; do
    printf "${CYAN}vibrae>${RESET} "
    read -r input || break
    
    # Skip empty input
    [ -z "$input" ] && continue
    
    # Exit commands
    case "$input" in
      exit|quit|q) ok "Goodbye!"; break ;;
    esac
    
    # Execute command
    eval "main $input" || true
    echo ""
  done
}

cmd_url() {
  # Load env file to get configured domain
  if [ -f "$ENV_FILE" ]; then
    set -a
    . "$ENV_FILE"
    set +a
  fi
  
  local domain="${DOMAIN:-localhost}"
  
  # Check if nginx is running on port 80 (unified architecture)
  if is_running "nginx" && lsof -nP -iTCP:80 -sTCP:LISTEN 2>/dev/null | grep -q nginx; then
    echo "http://${domain}"
    return 0
  fi
  
  # Fallback modes (when nginx not running)
  local backend_port="${BACKEND_PORT:-8000}"
  local frontend_port="${FRONTEND_PORT:-9081}"
  
  # Check if frontend is running (legacy mode)
  if is_running "npx serve"; then
    echo "http://${domain}:${frontend_port}"
    return 0
  fi
  
  # Fall back to backend only
  if is_running "uvicorn.*vibrae"; then
    echo "http://${domain}:${backend_port}"
    return 0
  fi
  
  err "No services running"
  return 1
}

cmd_open() {
  local url
  url=$(cmd_url) || return 1
  info "Opening $url"
  
  # Detect OS and open browser
  case "$(uname)" in
    Darwin) open "$url" ;;
    Linux) 
      if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$url"
      else
        err "Cannot open browser (xdg-open not found)"
        info "Visit: $url"
        return 1
      fi
      ;;
    *)
      err "Unsupported OS"
      info "Visit: $url"
      return 1
      ;;
  esac
  ok "Browser opened"
}

cmd_db_init() {
  header "Initializing Database"
  ensure_venv "$VENV" || return 1
  cd "$ROOT_DIR"
  "$VENV/bin/python" -c "from packages.core.src.vibrae_core.init_db import init_db; init_db()" || { err "DB init failed"; return 1; }
  ok "Database initialized"
}

cmd_help() {
  cat <<EOF
${BOLD}${BLUE}Vibrae${RESET} - Music Automation System

${BOLD}Usage:${RESET} vibrae <command> [args]

${BOLD}${GREEN}Core Commands:${RESET}
  ${CYAN}start${RESET}, ${CYAN}up${RESET}        Start all services
  ${CYAN}stop${RESET}, ${CYAN}down${RESET}       Stop all services
  ${CYAN}restart${RESET}           Restart services
  ${CYAN}status${RESET}, ${CYAN}st${RESET}       Show service status
  ${CYAN}open${RESET}              Open app in browser
  ${CYAN}url${RESET}               Show app URL
  
${BOLD}${GREEN}Development:${RESET}
  ${CYAN}install${RESET}           Install dependencies
  ${CYAN}test${RESET}              Run test suite
  ${CYAN}logs${RESET} [name]       Tail logs (backend, player, etc.)
  ${CYAN}config${RESET}            Edit configuration
  ${CYAN}autostart${RESET} [on|off] Toggle autostart for shell mode
  ${CYAN}db-init${RESET}           Initialize database
  
${BOLD}${GREEN}Environment:${RESET}
  ${CYAN}env${RESET} <subcmd>      Config management (run: vibrae env help)
  
${BOLD}${GREEN}Info:${RESET}
  ${CYAN}version${RESET}, ${CYAN}-v${RESET}      Show version
  ${CYAN}help${RESET}, ${CYAN}-h${RESET}         Show this help
  ${CYAN}shell${RESET}             Interactive shell mode

${BOLD}Examples:${RESET}
  vibrae                  ${GREY}# Interactive shell${RESET}
  vibrae install          ${GREY}# Install${RESET}
  vibrae env init         ${GREY}# Create config${RESET}
  vibrae start            ${GREY}# Start services${RESET}
  vibrae open             ${GREY}# Open in browser${RESET}
  vibrae logs backend     ${GREY}# View logs${RESET}
  vibrae env encrypt      ${GREY}# Encrypt config${RESET}
EOF
}

# Main router
main() {
  local cmd="${1:-shell}"
  shift || true
  case "$cmd" in
    start|up) cmd_start "$@" ;;
    stop|down) cmd_stop "$@" ;;
    restart) cmd_restart "$@" ;;
    status|st) cmd_status "$@" ;;
    open) cmd_open "$@" ;;
    url) cmd_url "$@" ;;
    shell|sh) cmd_shell "$@" ;;
    install) cmd_install "$@" ;;
    test) cmd_test "$@" ;;
    logs) cmd_logs "$@" ;;
    config) cmd_config "$@" ;;
    autostart) cmd_autostart "$@" ;;
    db-init) cmd_db_init "$@" ;;
    env) env_main "$@" ;;
    version|--version|-v) cmd_version "$@" ;;
    help|--help|-h) cmd_help "$@" ;;
    *) err "Unknown command: $cmd"; echo ""; info "Run 'vibrae help'"; return 1 ;;
  esac
}

main "$@"
